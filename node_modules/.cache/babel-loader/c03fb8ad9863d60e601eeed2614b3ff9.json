{"ast":null,"code":"'use strict';\n\nvar error = require('pug-error');\n\nmodule.exports = stripComments;\n\nfunction unexpectedToken(type, occasion, filename, line) {\n  var msg = '`' + type + '` encountered when ' + occasion;\n  throw error('UNEXPECTED_TOKEN', msg, {\n    filename: filename,\n    line: line\n  });\n}\n\nfunction stripComments(input, options) {\n  options = options || {}; // Default: strip unbuffered comments and leave buffered ones alone\n\n  var stripUnbuffered = options.stripUnbuffered !== false;\n  var stripBuffered = options.stripBuffered === true;\n  var filename = options.filename;\n  var out = []; // If we have encountered a comment token and are not sure if we have gotten\n  // out of the comment or not\n\n  var inComment = false; // If we are sure that we are in a block comment and all tokens except\n  // `end-pipeless-text` should be ignored\n\n  var inPipelessText = false;\n  return input.filter(function (tok) {\n    switch (tok.type) {\n      case 'comment':\n        if (inComment) {\n          unexpectedToken('comment', 'already in a comment', filename, tok.line);\n        } else {\n          inComment = tok.buffer ? stripBuffered : stripUnbuffered;\n          return !inComment;\n        }\n\n      case 'start-pipeless-text':\n        if (!inComment) return true;\n\n        if (inPipelessText) {\n          unexpectedToken('start-pipeless-text', 'already in pipeless text mode', filename, tok.line);\n        }\n\n        inPipelessText = true;\n        return false;\n\n      case 'end-pipeless-text':\n        if (!inComment) return true;\n\n        if (!inPipelessText) {\n          unexpectedToken('end-pipeless-text', 'not in pipeless text mode', filename, tok.line);\n        }\n\n        inPipelessText = false;\n        inComment = false;\n        return false;\n      // There might be a `text` right after `comment` but before\n      // `start-pipeless-text`. Treat it accordingly.\n\n      case 'text':\n        return !inComment;\n\n      default:\n        if (inPipelessText) return false;\n        inComment = false;\n        return true;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}