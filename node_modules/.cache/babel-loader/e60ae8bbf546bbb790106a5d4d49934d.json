{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\shail\\\\Desktop\\\\WEB designing\\\\Todo list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recursive = exports.ancestor = exports.simple = void 0;\n\nvar t = __importStar(require(\"@babel/types\"));\n\nvar explode_1 = __importDefault(require(\"./explode\"));\n\nvar VISITOR_KEYS = t.VISITOR_KEYS;\n\nif (!(VISITOR_KEYS && // tslint:disable-next-line: strict-type-predicates\ntypeof VISITOR_KEYS === 'object' && Object.keys(VISITOR_KEYS).every(function (key) {\n  return Array.isArray(VISITOR_KEYS[key]) && // tslint:disable-next-line: strict-type-predicates\n  VISITOR_KEYS[key].every(function (v) {\n    return typeof v === 'string';\n  });\n}))) {\n  throw new Error('@babel/types VISITOR_KEYS does not match the expected type.');\n}\n\nfunction simple(visitors) {\n  var vis = explode_1.default(visitors);\n  return function (node, state) {\n    (function recurse(node) {\n      if (!node) return;\n      var visitor = vis[node.type];\n\n      if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {\n        var _iterator = _createForOfIteratorHelper(visitor.enter),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var v = _step.value;\n            v(node, state);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(VISITOR_KEYS[node.type] || []),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          var subNode = node[key];\n\n          if (Array.isArray(subNode)) {\n            var _iterator4 = _createForOfIteratorHelper(subNode),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var subSubNode = _step4.value;\n                recurse(subSubNode);\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          } else {\n            recurse(subNode);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (visitor === null || visitor === void 0 ? void 0 : visitor.exit) {\n        var _iterator3 = _createForOfIteratorHelper(visitor.exit),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _v = _step3.value;\n\n            _v(node, state);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    })(node);\n  };\n}\n\nexports.simple = simple;\n\nfunction ancestor(visitors) {\n  var vis = explode_1.default(visitors);\n  return function (node, state) {\n    var ancestors = [];\n\n    (function recurse(node) {\n      if (!node) return;\n      var visitor = vis[node.type];\n      var isNew = node !== ancestors[ancestors.length - 1];\n      if (isNew) ancestors.push(node);\n\n      if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {\n        var _iterator5 = _createForOfIteratorHelper(visitor.enter),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var v = _step5.value;\n            v(node, state, ancestors);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(VISITOR_KEYS[node.type] || []),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          var subNode = node[key];\n\n          if (Array.isArray(subNode)) {\n            var _iterator8 = _createForOfIteratorHelper(subNode),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var subSubNode = _step8.value;\n                recurse(subSubNode);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          } else {\n            recurse(subNode);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      if (visitor === null || visitor === void 0 ? void 0 : visitor.exit) {\n        var _iterator7 = _createForOfIteratorHelper(visitor.exit),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _v2 = _step7.value;\n\n            _v2(node, state, ancestors);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      if (isNew) ancestors.pop();\n    })(node);\n  };\n}\n\nexports.ancestor = ancestor;\n\nfunction recursive(visitors) {\n  var vis = explode_1.default(visitors);\n  return function (node, state) {\n    (function recurse(node) {\n      if (!node) return;\n      var visitor = vis[node.type];\n\n      if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {\n        var _iterator9 = _createForOfIteratorHelper(visitor.enter),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var v = _step9.value;\n            v(node, state, recurse);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else {\n        var _iterator10 = _createForOfIteratorHelper(VISITOR_KEYS[node.type] || []),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var key = _step10.value;\n            var subNode = node[key];\n\n            if (Array.isArray(subNode)) {\n              var _iterator11 = _createForOfIteratorHelper(subNode),\n                  _step11;\n\n              try {\n                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                  var subSubNode = _step11.value;\n                  recurse(subSubNode);\n                }\n              } catch (err) {\n                _iterator11.e(err);\n              } finally {\n                _iterator11.f();\n              }\n            } else {\n              recurse(subNode);\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    })(node);\n  };\n}\n\nexports.recursive = recursive;","map":null,"metadata":{},"sourceType":"script"}