{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar walk = require('pug-walk');\n\nvar assign = require('object-assign');\n\nmodule.exports = load;\n\nfunction load(ast, options) {\n  options = getOptions(options); // clone the ast\n\n  ast = JSON.parse(JSON.stringify(ast));\n  return walk(ast, function (node) {\n    if (node.str === undefined) {\n      if (node.type === 'Include' || node.type === 'RawInclude' || node.type === 'Extends') {\n        var file = node.file;\n\n        if (file.type !== 'FileReference') {\n          throw new Error('Expected file.type to be \"FileReference\"');\n        }\n\n        var path, str, raw;\n\n        try {\n          path = options.resolve(file.path, file.filename, options);\n          file.fullPath = path;\n          raw = options.read(path, options);\n          str = raw.toString('utf8');\n        } catch (ex) {\n          ex.message += '\\n    at ' + node.filename + ' line ' + node.line;\n          throw ex;\n        }\n\n        file.str = str;\n        file.raw = raw;\n\n        if (node.type === 'Extends' || node.type === 'Include') {\n          file.ast = load.string(str, assign({}, options, {\n            filename: path\n          }));\n        }\n      }\n    }\n  });\n}\n\nload.string = function loadString(src, options) {\n  options = assign(getOptions(options), {\n    src: src\n  });\n  var tokens = options.lex(src, options);\n  var ast = options.parse(tokens, options);\n  return load(ast, options);\n};\n\nload.file = function loadFile(filename, options) {\n  options = assign(getOptions(options), {\n    filename: filename\n  });\n  var str = options.read(filename).toString('utf8');\n  return load.string(str, options);\n};\n\nload.resolve = function resolve(filename, source, options) {\n  filename = filename.trim();\n  if (filename[0] !== '/' && !source) throw new Error('the \"filename\" option is required to use includes and extends with \"relative\" paths');\n  if (filename[0] === '/' && !options.basedir) throw new Error('the \"basedir\" option is required to use includes and extends with \"absolute\" paths');\n  filename = path.join(filename[0] === '/' ? options.basedir : path.dirname(source.trim()), filename);\n  return filename;\n};\n\nload.read = function read(filename, options) {\n  return fs.readFileSync(filename);\n};\n\nload.validateOptions = function validateOptions(options) {\n  /* istanbul ignore if */\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof options.lex !== 'function') {\n    throw new TypeError('options.lex must be a function');\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof options.parse !== 'function') {\n    throw new TypeError('options.parse must be a function');\n  }\n  /* istanbul ignore if */\n\n\n  if (options.resolve && typeof options.resolve !== 'function') {\n    throw new TypeError('options.resolve must be a function');\n  }\n  /* istanbul ignore if */\n\n\n  if (options.read && typeof options.read !== 'function') {\n    throw new TypeError('options.read must be a function');\n  }\n};\n\nfunction getOptions(options) {\n  load.validateOptions(options);\n  return assign({\n    resolve: load.resolve,\n    read: load.read\n  }, options);\n}","map":null,"metadata":{},"sourceType":"script"}