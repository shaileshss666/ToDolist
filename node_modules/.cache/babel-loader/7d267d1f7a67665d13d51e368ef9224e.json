{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar constantinople = require('constantinople');\n\nvar runtime = require('pug-runtime');\n\nvar stringify = require('js-stringify');\n\nfunction isConstant(src) {\n  return constantinople(src, {\n    pug: runtime,\n    pug_interp: undefined\n  });\n}\n\nfunction toConstant(src) {\n  return constantinople.toConstant(src, {\n    pug: runtime,\n    pug_interp: undefined\n  });\n}\n\nmodule.exports = compileAttrs;\n/**\n * options:\n *  - terse\n *  - runtime\n *  - format ('html' || 'object')\n */\n\nfunction compileAttrs(attrs, options) {\n  assert(Array.isArray(attrs), 'Attrs should be an array');\n  assert(attrs.every(function (attr) {\n    return attr && typeof attr === 'object' && typeof attr.name === 'string' && (typeof attr.val === 'string' || typeof attr.val === 'boolean') && typeof attr.mustEscape === 'boolean';\n  }), 'All attributes should be supplied as an object of the form {name, val, mustEscape}');\n  assert(options && typeof options === 'object', 'Options should be an object');\n  assert(typeof options.terse === 'boolean', 'Options.terse should be a boolean');\n  assert(typeof options.runtime === 'function', 'Options.runtime should be a function that takes a runtime function name and returns the source code that will evaluate to that function at runtime');\n  assert(options.format === 'html' || options.format === 'object', 'Options.format should be \"html\" or \"object\"');\n  var buf = [];\n  var classes = [];\n  var classEscaping = [];\n\n  function addAttribute(key, val, mustEscape, buf) {\n    if (isConstant(val)) {\n      if (options.format === 'html') {\n        var str = stringify(runtime.attr(key, toConstant(val), mustEscape, options.terse));\n        var last = buf[buf.length - 1];\n\n        if (last && last[last.length - 1] === str[0]) {\n          buf[buf.length - 1] = last.substr(0, last.length - 1) + str.substr(1);\n        } else {\n          buf.push(str);\n        }\n      } else {\n        val = toConstant(val);\n\n        if (mustEscape) {\n          val = runtime.escape(val);\n        }\n\n        buf.push(stringify(key) + ': ' + stringify(val));\n      }\n    } else {\n      if (options.format === 'html') {\n        buf.push(options.runtime('attr') + '(\"' + key + '\", ' + val + ', ' + stringify(mustEscape) + ', ' + stringify(options.terse) + ')');\n      } else {\n        if (mustEscape) {\n          val = options.runtime('escape') + '(' + val + ')';\n        }\n\n        buf.push(stringify(key) + ': ' + val);\n      }\n    }\n  }\n\n  attrs.forEach(function (attr) {\n    var key = attr.name;\n    var val = attr.val;\n    var mustEscape = attr.mustEscape;\n\n    if (key === 'class') {\n      classes.push(val);\n      classEscaping.push(mustEscape);\n    } else {\n      if (key === 'style') {\n        if (isConstant(val)) {\n          val = stringify(runtime.style(toConstant(val)));\n        } else {\n          val = options.runtime('style') + '(' + val + ')';\n        }\n      }\n\n      addAttribute(key, val, mustEscape, buf);\n    }\n  });\n  var classesBuf = [];\n\n  if (classes.length) {\n    if (classes.every(isConstant)) {\n      addAttribute('class', stringify(runtime.classes(classes.map(toConstant), classEscaping)), false, classesBuf);\n    } else {\n      classes = classes.map(function (cls, i) {\n        if (isConstant(cls)) {\n          cls = stringify(classEscaping[i] ? runtime.escape(toConstant(cls)) : toConstant(cls));\n          classEscaping[i] = false;\n        }\n\n        return cls;\n      });\n      addAttribute('class', options.runtime('classes') + '([' + classes.join(',') + '], ' + stringify(classEscaping) + ')', false, classesBuf);\n    }\n  }\n\n  buf = classesBuf.concat(buf);\n  if (options.format === 'html') return buf.length ? buf.join('+') : '\"\"';else return '{' + buf.join(',') + '}';\n}","map":null,"metadata":{},"sourceType":"script"}