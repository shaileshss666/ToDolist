{"ast":null,"code":"'use strict';\n\nvar has = require('has');\n\nfunction specifierIncluded(current, specifier) {\n  var nodeParts = current.split('.');\n  var parts = specifier.split(' ');\n  var op = parts.length > 1 ? parts[0] : '=';\n  var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\n\n  for (var i = 0; i < 3; ++i) {\n    var cur = parseInt(nodeParts[i] || 0, 10);\n    var ver = parseInt(versionParts[i] || 0, 10);\n\n    if (cur === ver) {\n      continue; // eslint-disable-line no-restricted-syntax, no-continue\n    }\n\n    if (op === '<') {\n      return cur < ver;\n    }\n\n    if (op === '>=') {\n      return cur >= ver;\n    }\n\n    return false;\n  }\n\n  return op === '>=';\n}\n\nfunction matchesRange(current, range) {\n  var specifiers = range.split(/ ?&& ?/);\n\n  if (specifiers.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < specifiers.length; ++i) {\n    if (!specifierIncluded(current, specifiers[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction versionIncluded(nodeVersion, specifierValue) {\n  if (typeof specifierValue === 'boolean') {\n    return specifierValue;\n  }\n\n  var current = typeof nodeVersion === 'undefined' ? process.versions && process.versions.node : nodeVersion;\n\n  if (typeof current !== 'string') {\n    throw new TypeError(typeof nodeVersion === 'undefined' ? 'Unable to determine current node version' : 'If provided, a valid node version is required');\n  }\n\n  if (specifierValue && typeof specifierValue === 'object') {\n    for (var i = 0; i < specifierValue.length; ++i) {\n      if (matchesRange(current, specifierValue[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return matchesRange(current, specifierValue);\n}\n\nvar data = require('./core.json');\n\nmodule.exports = function isCore(x, nodeVersion) {\n  return has(data, x) && versionIncluded(nodeVersion, data[x]);\n};","map":null,"metadata":{},"sourceType":"script"}